{"ast":null,"code":"var _jsxFileName = \"/Users/ISCITY/Desktop/development/livechat/client/src/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    receiver,\n    chatData\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    }); // setMessageList(chatData);\n  }, [socket]);\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n  return (\n    /*#__PURE__*/\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    //           <div className=\"message-content\">\n    //             <p>{messageContent.message}</p>\n    //           </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    //       value={currentMessage}\n    //       placeholder=\"Hey...\"\n    //       onChange={(event) => {\n    //         setCurrentMessage(event.target.value);\n    //       }}\n    //       onKeyPress={(event) => {\n    //         event.key === \"Enter\" && sendMessage();\n    //       }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"avenue-messenger\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"agent-face\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"half\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"agent circle\",\n            src: \"http://askavenue.com/img/17.jpg\",\n            alt: \"Jesse Tino\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: receiver\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"RE/MAX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"message-container\",\n          children: messageList.map((messageContent, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messages\",\n              id: username === messageContent.sender ? \"other\" : \"you\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"messages-content\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: messageContent.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)\n            }, messageContent.message + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            className: \"message-input\",\n            placeholder: \"Type message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"message-submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Chat, \"Wfdnz/7dPIaaD+K7zhvDQgQgmAY=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/ISCITY/Desktop/development/livechat/client/src/chat.js"],"names":["React","useEffect","useState","ScrollToBottom","Moment","Chat","socket","username","receiver","chatData","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","sender","message","time","Date","emit","list","on","data","map","messageContent","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;;;AAEA,SAASC,IAAT,OAAwD;AAAA;;AAAA,MAA1C;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA;AAA9B,GAA0C;AACtD,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMY,WAAW,GAAG,YAAY;AAC9B,QAAIJ,cAAc,KAAK,EAAvB,EAA2B;AACzB,YAAMK,WAAW,GAAG;AAClBP,QAAAA,QAAQ,EAAEA,QADQ;AAElBQ,QAAAA,MAAM,EAAET,QAFU;AAGlBU,QAAAA,OAAO,EAAEP,cAHS;AAIlBQ,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJY,OAApB;AAOA,YAAMb,MAAM,CAACc,IAAP,CAAY,cAAZ,EAA4BL,WAA5B,CAAN;AACAF,MAAAA,cAAc,CAAEQ,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUN,WAAV,CAAX,CAAd;AACAJ,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;AACF,GAbD;;AAeAV,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACgB,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACrCV,MAAAA,cAAc,CAAEQ,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUE,IAAV,CAAX,CAAd;AACD,KAFD,EADc,CAId;AACD,GALQ,EAKN,CAACjB,MAAD,CALM,CAAT;AAOAL,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc,CAACJ,QAAD,CAAd;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,GAAG,EAAC,iCAFN;AAGE,YAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AAAA,sBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,cAAD;AAAgB,UAAA,SAAS,EAAC,mBAA1B;AAAA,oBACGI,WAAW,CAACY,GAAZ,CAAgB,CAACC,cAAD,EAAiBC,KAAjB,KAA2B;AAC1C,gCACE;AACE,cAAA,SAAS,EAAC,UADZ;AAEE,cAAA,EAAE,EAAEnB,QAAQ,KAAKkB,cAAc,CAACT,MAA5B,GAAqC,OAArC,GAA+C,KAFrD;AAAA,qCAKE;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,kBAAf;AAAA,yCACE;AAAA,8BAAIS,cAAc,CAACR;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALF,eAGOQ,cAAc,CAACR,OAAf,GAAyBS,KAHhC;AAAA;AAAA;AAAA;AAAA,oBADF;AAoBD,WArBA;AADH;AAAA;AAAA;AAAA;AAAA,gBAXF,eAoCE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,eAFZ;AAGE,YAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,kBADF,eAME;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApCF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AA/CF;AA0GD;;GAxIQrB,I;;KAAAA,I;AA0IT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\n\nfunction Chat({ socket, username, receiver, chatData }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n    // setMessageList(chatData);\n  }, [socket]);\n\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n\n  return (\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    //           <div className=\"message-content\">\n    //             <p>{messageContent.message}</p>\n    //           </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    //       value={currentMessage}\n    //       placeholder=\"Hey...\"\n    //       onChange={(event) => {\n    //         setCurrentMessage(event.target.value);\n    //       }}\n    //       onKeyPress={(event) => {\n    //         event.key === \"Enter\" && sendMessage();\n    //       }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n\n    <div className=\"avenue-messenger\">\n      <div className=\"agent-face\">\n        <div className=\"half\">\n          <img\n            className=\"agent circle\"\n            src=\"http://askavenue.com/img/17.jpg\"\n            alt=\"Jesse Tino\"\n          />\n        </div>\n      </div>\n      <div className=\"chat\">\n        <div className=\"chat-title\">\n          <h1>{receiver}</h1>\n          <h2>RE/MAX</h2>\n        </div>\n        {/* <div className=\"messages\">\n          <div className=\"messages-content\">\n            \n          </div>\n        </div> */}\n\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent, index) => {\n            return (\n              <div\n                className=\"messages\"\n                id={username === messageContent.sender ? \"other\" : \"you\"}\n                key={messageContent.message + index}\n              >\n                <div>\n                  <div className=\"messages-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  {/* <div className=\"message-meta\">\n                  <Moment format=\"HH:mm\" id=\"time\">\n                    {messageContent.time}\n                  </Moment>\n\n                  <p id=\"author\">{messageContent.sender}</p>\n                </div> */}\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n\n        <div className=\"message-box\">\n          <textarea\n            type=\"text\"\n            className=\"message-input\"\n            placeholder=\"Type message...\"\n          ></textarea>\n          <button type=\"submit\" className=\"message-submit\">\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}