{"ast":null,"code":"var _jsxFileName = \"/Users/ISCITY/Desktop/development/livechat/client/src/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: \"100%\" // height: \"80vh\",\n\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\"\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\"\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\"\n  },\n  from: {\n    width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\"\n  },\n  messageText: {\n    // float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\"\n  }\n});\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    receiver,\n    chatData\n  } = _ref;\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    }); // setMessageList(chatData);\n  }, [socket]);\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: \"header-message\",\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: Paper,\n      className: classes.chatSection,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        className: classes.borderRight500,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                alt: \"Remy Sharp\",\n                src: \"https://material-ui.com/static/images/avatar/1.jpg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: receiver,\n              children: receiver\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              secondary: \"online\",\n              align: \"right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)]\n          }, \"RemySharp\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          className: classes.messageArea,\n          children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n            className: \"message-container\",\n            children: messageList.map((messageContent, index) => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      align: username === messageContent.sender ? \"right\" : \"left\",\n                      primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"chat-message-group writer-user\",\n                          children: /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"chat-messages\",\n                            children: /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: classes.messageText,\n                              children: [messageContent.message, /*#__PURE__*/_jsxDEV(\"div\", {\n                                className: classes.from,\n                                children: /*#__PURE__*/_jsxDEV(Moment, {\n                                  format: \"HH:mm\",\n                                  id: \"time\",\n                                  children: messageContent.time\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 131,\n                                  columnNumber: 39\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 130,\n                                columnNumber: 37\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 128,\n                              columnNumber: 35\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 127,\n                            columnNumber: 33\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 126,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 21\n                }, this)\n              }, messageContent.message + index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-basic-email\",\n              label: \"Type Something\",\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            align: \"right\",\n            children: /*#__PURE__*/_jsxDEV(Fab, {\n              color: \"primary\",\n              \"aria-label\": \"add\",\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this) // <div className=\"chat-window\">\n  //   <div className=\"chat-header\">\n  //     <p>{receiver}</p>\n  //   </div>\n  //   <div className=\"chat-body\">\n  // <ScrollToBottom className=\"message-container\">\n  //   {messageList.map((messageContent, index) => {\n  //     return (\n  //       <div\n  //         className=\"message\"\n  //         id={username === messageContent.sender ? \"other\" : \"you\"}\n  //         key={messageContent.message + index}\n  //       >\n  //         <div>\n  // <div className=\"message-content\">\n  //   <p>{messageContent.message}</p>\n  // </div>\n  //           <div className=\"message-meta\">\n  //             <Moment format=\"HH:mm\" id=\"time\">\n  //               {messageContent.time}\n  //             </Moment>\n  //             <p id=\"author\">{messageContent.sender}</p>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     );\n  //   })}\n  // </ScrollToBottom>\n  //   </div>\n  //   <div className=\"chat-footer\">\n  //     <input\n  //       type=\"text\"\n  //       value={currentMessage}\n  //       placeholder=\"Hey...\"\n  //       onChange={(event) => {\n  //         setCurrentMessage(event.target.value);\n  //       }}\n  //       onKeyPress={(event) => {\n  //         event.key === \"Enter\" && sendMessage();\n  //       }}\n  //     />\n  //     <button onClick={sendMessage}>&#9658;</button>\n  //   </div>\n  // </div>\n  ;\n}\n\n_s(Chat, \"thw5txqtORz6bn1C1/E5xCQlsbg=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/ISCITY/Desktop/development/livechat/client/src/chat.js"],"names":["React","useEffect","useState","ScrollToBottom","Moment","makeStyles","Paper","Grid","Box","Divider","TextField","Typography","List","ListItem","ListItemIcon","ListItemText","Avatar","Fab","SendIcon","useStyles","table","minWidth","chatSection","width","headBG","backgroundColor","borderRight500","borderRight","messageArea","height","overflowY","from","textAlign","fontSize","messageText","background","color","padding","borderRadius","marginBottom","Chat","socket","username","receiver","chatData","classes","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","sender","message","time","Date","emit","list","on","data","map","messageContent","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: \"100%\",\n    // height: \"80vh\",\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\",\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\",\n  },\n  from: {\n    width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n  },\n\n  messageText: {\n    // float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n});\n\nfunction Chat({ socket, username, receiver, chatData }) {\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n    // setMessageList(chatData);\n  }, [socket]);\n\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item={true} xs={12}>\n          <Typography variant=\"h5\" className=\"header-message\">\n            Chat\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container component={Paper} className={classes.chatSection}>\n        <Grid item={true} xs={3} className={classes.borderRight500}>\n          <List>\n            <ListItem button key=\"RemySharp\">\n              <ListItemIcon>\n                <Avatar\n                  alt=\"Remy Sharp\"\n                  src=\"https://material-ui.com/static/images/avatar/1.jpg\"\n                />\n              </ListItemIcon>\n              <ListItemText primary={receiver}>{receiver}</ListItemText>\n              <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\n            </ListItem>\n            <Divider />\n          </List>\n        </Grid>\n        <Grid item={true} xs={9}>\n          <List className={classes.messageArea}>\n            <ScrollToBottom className=\"message-container\">\n              {messageList.map((messageContent, index) => {\n                return (\n                  <ListItem key={messageContent.message + index}>\n                    <Grid container>\n                      <Grid item={true} xs={12}>\n                        <ListItemText\n                          align={\n                            username === messageContent.sender\n                              ? \"right\"\n                              : \"left\"\n                          }\n                          primary={\n                            <>\n                              <div className=\"chat-message-group writer-user\">\n                                <div className=\"chat-messages\">\n                                  <div className={classes.messageText}>\n                                    {messageContent.message}\n                                    <div className={classes.from}>\n                                      <Moment format=\"HH:mm\" id=\"time\">\n                                        {messageContent.time}\n                                      </Moment>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                              {/* <div className={classes.messageContent}>\n                                {messageContent.message}\n                                <div>\n                                  <div>\n                                    <Moment format=\"HH:mm\" id=\"time\">\n                                      {messageContent.time}\n                                    </Moment>\n                                  </div>\n                                </div>\n                              </div> */}\n                            </>\n                          }\n                        ></ListItemText>\n                      </Grid>\n                      {/* <Grid item={true} xs={12}>\n                        <ListItemText\n                          align={\n                            username === messageContent.sender\n                              ? \"right\"\n                              : \"left\"\n                          }\n                          secondary={\n                            <Moment format=\"HH:mm\" id=\"time\">\n                              {messageContent.time}\n                            </Moment>\n                          }\n                        ></ListItemText>\n                      </Grid> */}\n                    </Grid>\n                  </ListItem>\n                );\n              })}\n            </ScrollToBottom>\n          </List>\n          <Divider />\n          <Grid container style={{ padding: \"20px\" }}>\n            <Grid item={true} xs={11}>\n              <TextField\n                id=\"outlined-basic-email\"\n                label=\"Type Something\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item={true} xs={1} align=\"right\">\n              <Fab color=\"primary\" aria-label=\"add\">\n                <SendIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    // <div className=\"message-content\">\n    //   <p>{messageContent.message}</p>\n    // </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    //       value={currentMessage}\n    //       placeholder=\"Hey...\"\n    //       onChange={(event) => {\n    //         setCurrentMessage(event.target.value);\n    //       }}\n    //       onKeyPress={(event) => {\n    //         event.key === \"Enter\" && sendMessage();\n    //       }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}