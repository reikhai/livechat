{"ast":null,"code":"var _jsxFileName = \"/Users/ISCITY/Desktop/development/livechat/client/src/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\"; // import AutoScroll from \"@brianmcallister/react-auto-scroll\";\n\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { css } from \"@emotion/css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROOT_CSS = css({\n  height: 600\n});\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: \"100%\" // height: \"80vh\",\n\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\"\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\"\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\"\n  },\n  from: {\n    // width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n    margin: \"5px 0px 0px 25px\"\n  },\n  messageTextSelf: {\n    float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\"\n  },\n  messageTextOpponent: {\n    float: \"left\",\n    background: \"#ecf1f8\",\n    color: \"#4a4a4a\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\"\n  }\n});\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    receiver,\n    chatData\n  } = _ref;\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [socket]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    }); // setMessageList(chatData);\n  }, [socket]);\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"head\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://picsum.photos/g/40/40\",\n              alt: \"test\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name\",\n            children: receiver\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          children: messageList.map((messageContent, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: username === messageContent.sender ? \"outgoing\" : \"incoming\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bubble\",\n                ref: messagesEndRef,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-inline\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: messageContent.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-msg-time\",\n                    children: /*#__PURE__*/_jsxDEV(Moment, {\n                      format: \"HH:mm\",\n                      id: \"time\",\n                      children: messageContent.time\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 125,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this)\n            }, messageContent.message + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"foot\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"msg\",\n          placeholder: \"Type a message...\",\n          value: currentMessage,\n          onChange: event => {\n            setCurrentMessage(event.target.value);\n          },\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: sendMessage,\n          children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this) // <div className=\"chat-window\">\n  //   <div className=\"chat-header\">\n  //     <p>{receiver}</p>\n  //   </div>\n  //   <div className=\"chat-body\">\n  // <ScrollToBottom className=\"message-container\">\n  //   {messageList.map((messageContent, index) => {\n  //     return (\n  //       <div\n  //         className=\"message\"\n  //         id={username === messageContent.sender ? \"other\" : \"you\"}\n  //         key={messageContent.message + index}\n  //       >\n  //         <div>\n  // <div className=\"message-content\">\n  //   <p>{messageContent.message}</p>\n  // </div>\n  //           <div className=\"message-meta\">\n  //             <Moment format=\"HH:mm\" id=\"time\">\n  //               {messageContent.time}\n  //             </Moment>\n  //             <p id=\"author\">{messageContent.sender}</p>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     );\n  //   })}\n  // </ScrollToBottom>\n  //   </div>\n  //   <div className=\"chat-footer\">\n  //     <input\n  //       type=\"text\"\n  // value={currentMessage}\n  // placeholder=\"Hey...\"\n  // onChange={(event) => {\n  //   setCurrentMessage(event.target.value);\n  // }}\n  // onKeyPress={(event) => {\n  //   event.key === \"Enter\" && sendMessage();\n  // }}\n  //     />\n  //     <button onClick={sendMessage}>&#9658;</button>\n  //   </div>\n  // </div>\n  ;\n}\n\n_s(Chat, \"ZMnywGuvxxsE2FqK4RTjBJHqo9E=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/ISCITY/Desktop/development/livechat/client/src/chat.js"],"names":["React","useEffect","useState","useRef","ScrollToBottom","Moment","makeStyles","SendIcon","css","ROOT_CSS","height","useStyles","table","minWidth","chatSection","width","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","from","textAlign","fontSize","margin","messageTextSelf","float","background","color","padding","borderRadius","marginBottom","messageTextOpponent","Chat","socket","username","receiver","chatData","classes","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","sender","message","time","Date","emit","list","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","on","data","map","messageContent","index","event","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n// import AutoScroll from \"@brianmcallister/react-auto-scroll\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { css } from \"@emotion/css\";\n\nconst ROOT_CSS = css({\n  height: 600,\n});\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: \"100%\",\n    // height: \"80vh\",\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\",\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\",\n  },\n  from: {\n    // width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n    margin: \"5px 0px 0px 25px\",\n  },\n\n  messageTextSelf: {\n    float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n\n  messageTextOpponent: {\n    float: \"left\",\n    background: \"#ecf1f8\",\n    color: \"#4a4a4a\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n});\n\nfunction Chat({ socket, username, receiver, chatData }) {\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [socket]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n    // setMessageList(chatData);\n  }, [socket]);\n\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"chat_box\">\n        <div className=\"head\">\n          <div className=\"user\">\n            <div className=\"avatar\">\n              <img src=\"https://picsum.photos/g/40/40\" alt=\"test\" />\n            </div>\n            <div className=\"name\">{receiver}</div>\n          </div>\n        </div>\n        <div className=\"body\">\n          <ScrollToBottom>\n            {messageList.map((messageContent, index) => {\n              return (\n                <div\n                  className={\n                    username === messageContent.sender ? \"outgoing\" : \"incoming\"\n                  }\n                  key={messageContent.message + index}\n                >\n                  <div className=\"bubble\" ref={messagesEndRef}>\n                    <div className=\"d-inline\">\n                      <span>{messageContent.message}</span>\n                      <span className=\"font-msg-time\">\n                        <Moment format=\"HH:mm\" id=\"time\">\n                          {messageContent.time}\n                        </Moment>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </ScrollToBottom>\n\n          {/* <div className=\"typing\">\n            <div className=\"bubble\">\n              <div className=\"ellipsis dot_1\"></div>\n              <div className=\"ellipsis dot_2\"></div>\n              <div className=\"ellipsis dot_3\"></div>\n            </div>\n          </div> */}\n        </div>\n        <div className=\"foot\">\n          <input\n            type=\"text\"\n            className=\"msg\"\n            placeholder=\"Type a message...\"\n            value={currentMessage}\n            onChange={(event) => {\n              setCurrentMessage(event.target.value);\n            }}\n            onKeyPress={(event) => {\n              event.key === \"Enter\" && sendMessage();\n            }}\n          />\n          <button type=\"submit\" onClick={sendMessage}>\n            <SendIcon></SendIcon>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    // <div className=\"message-content\">\n    //   <p>{messageContent.message}</p>\n    // </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    // value={currentMessage}\n    // placeholder=\"Hey...\"\n    // onChange={(event) => {\n    //   setCurrentMessage(event.target.value);\n    // }}\n    // onKeyPress={(event) => {\n    //   event.key === \"Enter\" && sendMessage();\n    // }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}