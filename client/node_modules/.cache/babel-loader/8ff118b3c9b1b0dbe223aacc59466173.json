{"ast":null,"code":"var _jsxFileName = \"/Users/ISCITY/Desktop/development/livechat/client/src/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: \"100%\" // height: \"80vh\",\n\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\"\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\"\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\"\n  },\n  from: {\n    // width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n    margin: \"5px 0px 0px 25px\"\n  },\n  messageTextSelf: {\n    float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\"\n  },\n  messageTextOpponent: {\n    float: \"left\",\n    background: \"#ecf1f8\",\n    color: \"#4a4a4a\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\"\n  }\n});\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    receiver,\n    chatData\n  } = _ref;\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    }); // setMessageList(chatData);\n  }, [socket]);\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-wrapper avatar-big\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://znews-photo.zadn.vn/w660/Uploaded/pnbcuhbatgunb/2020_03_23/i13863960814_1.jpg\",\n          alt: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: receiver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"options\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-ellipsis-h\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-room\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"message-container\",\n        children: messageList.map((messageContent, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: username === messageContent.sender ? \"message message-right\" : \"message message-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar-wrapper avatar-small\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://znews-photo.zadn.vn/w660/Uploaded/pnbcuhbatgunb/2020_03_23/i13863960814_1.jpg\",\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: username === messageContent.sender ? \"bubble bubble-light\" : \"bubble bubble-dark\",\n              children: messageContent.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Moment, {\n              format: \"HH:mm\",\n              id: \"time\",\n              children: messageContent.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"inputText\",\n          placeholder: \"Type messages here...\",\n          value: currentMessage,\n          onChange: event => {\n            setCurrentMessage(event.target.value);\n          },\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-send\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this) // <div>\n  //   <Grid container>\n  //     <Grid item={true} xs={12}>\n  //       <Typography variant=\"h5\" className=\"header-message\">\n  //         Chat\n  //       </Typography>\n  //     </Grid>\n  //   </Grid>\n  //   <Grid container component={Paper} className={classes.chatSection}>\n  //     <Grid item={true} xs={3} className={classes.borderRight500}>\n  //       <List>\n  //         <ListItem button key=\"RemySharp\">\n  //           <ListItemIcon>\n  //             <Avatar\n  //               alt=\"Remy Sharp\"\n  //               src=\"https://material-ui.com/static/images/avatar/1.jpg\"\n  //             />\n  //           </ListItemIcon>\n  //           <ListItemText primary={receiver}>{receiver}</ListItemText>\n  //           <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\n  //         </ListItem>\n  //         <Divider />\n  //       </List>\n  //     </Grid>\n  //     <Grid item={true} xs={9}>\n  //       <List className={classes.messageArea}>\n  //         <ScrollToBottom className=\"message-container\">\n  //           {messageList.map((messageContent, index) => {\n  //             return (\n  //               <ListItem key={messageContent.message + index}>\n  //                 <Grid container>\n  //                   <Grid item={true} xs={12}>\n  //                     <div className=\"chat-messages\">\n  //                       <div\n  //                         className={\n  //                           username === messageContent.sender\n  //                             ? classes.messageTextSelf\n  //                             : classes.messageTextOpponent\n  //                         }\n  //                       >\n  //                         {messageContent.message}\n  //                         <div className={classes.from}>\n  //                           <Moment format=\"HH:mm\" id=\"time\">\n  //                             {messageContent.time}\n  //                           </Moment>\n  //                         </div>\n  //                       </div>\n  //                     </div>\n  //                   </Grid>\n  //                 </Grid>\n  //               </ListItem>\n  //             );\n  //           })}\n  //         </ScrollToBottom>\n  //       </List>\n  //       <Divider />\n  //       <Grid container style={{ padding: \"20px\" }}>\n  //         <Grid item={true} xs={11}>\n  //           <TextField\n  //             id=\"outlined-basic-email\"\n  //             label=\"Type Something\"\n  //             fullWidth\n  //             value={currentMessage}\n  //             placeholder=\"Hey...\"\n  //             onChange={(event) => {\n  //               setCurrentMessage(event.target.value);\n  //             }}\n  //             onKeyPress={(event) => {\n  //               event.key === \"Enter\" && sendMessage();\n  //             }}\n  //           />\n  //         </Grid>\n  //         <Grid item={true} xs={1} align=\"right\">\n  //           <Fab color=\"primary\" aria-label=\"add\">\n  //             <SendIcon />\n  //           </Fab>\n  //         </Grid>\n  //       </Grid>\n  //     </Grid>\n  //   </Grid>\n  // </div>\n  // <div className=\"chat-window\">\n  //   <div className=\"chat-header\">\n  //     <p>{receiver}</p>\n  //   </div>\n  //   <div className=\"chat-body\">\n  // <ScrollToBottom className=\"message-container\">\n  //   {messageList.map((messageContent, index) => {\n  //     return (\n  //       <div\n  //         className=\"message\"\n  //         id={username === messageContent.sender ? \"other\" : \"you\"}\n  //         key={messageContent.message + index}\n  //       >\n  //         <div>\n  // <div className=\"message-content\">\n  //   <p>{messageContent.message}</p>\n  // </div>\n  //           <div className=\"message-meta\">\n  //             <Moment format=\"HH:mm\" id=\"time\">\n  //               {messageContent.time}\n  //             </Moment>\n  //             <p id=\"author\">{messageContent.sender}</p>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     );\n  //   })}\n  // </ScrollToBottom>\n  //   </div>\n  //   <div className=\"chat-footer\">\n  //     <input\n  //       type=\"text\"\n  // value={currentMessage}\n  // placeholder=\"Hey...\"\n  // onChange={(event) => {\n  //   setCurrentMessage(event.target.value);\n  // }}\n  // onKeyPress={(event) => {\n  //   event.key === \"Enter\" && sendMessage();\n  // }}\n  //     />\n  //     <button onClick={sendMessage}>&#9658;</button>\n  //   </div>\n  // </div>\n  ;\n}\n\n_s(Chat, \"thw5txqtORz6bn1C1/E5xCQlsbg=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/ISCITY/Desktop/development/livechat/client/src/chat.js"],"names":["React","useEffect","useState","ScrollToBottom","Moment","makeStyles","Paper","Grid","Box","Divider","TextField","Typography","List","ListItem","ListItemIcon","ListItemText","Avatar","Fab","SendIcon","useStyles","table","minWidth","chatSection","width","headBG","backgroundColor","borderRight500","borderRight","messageArea","height","overflowY","from","textAlign","fontSize","margin","messageTextSelf","float","background","color","padding","borderRadius","marginBottom","messageTextOpponent","Chat","socket","username","receiver","chatData","classes","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","sender","message","time","Date","emit","list","on","data","map","messageContent","index","event","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: \"100%\",\n    // height: \"80vh\",\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\",\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\",\n  },\n  from: {\n    // width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n    margin: \"5px 0px 0px 25px\",\n  },\n\n  messageTextSelf: {\n    float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n\n  messageTextOpponent: {\n    float: \"left\",\n    background: \"#ecf1f8\",\n    color: \"#4a4a4a\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n});\n\nfunction Chat({ socket, username, receiver, chatData }) {\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n    // setMessageList(chatData);\n  }, [socket]);\n\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n\n  return (\n    <div className=\"chat-box\">\n      <div className=\"header\">\n        <div className=\"avatar-wrapper avatar-big\">\n          <img\n            src=\"https://znews-photo.zadn.vn/w660/Uploaded/pnbcuhbatgunb/2020_03_23/i13863960814_1.jpg\"\n            alt=\"avatar\"\n          />\n        </div>\n        <span className=\"name\">{receiver}</span>\n        <span className=\"options\">\n          <i className=\"fas fa-ellipsis-h\"></i>\n        </span>\n      </div>\n      <div className=\"chat-room\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent, index) => {\n            return (\n              <div\n                className={\n                  username === messageContent.sender\n                    ? \"message message-right\"\n                    : \"message message-left\"\n                }\n              >\n                <div className=\"avatar-wrapper avatar-small\">\n                  <img\n                    src=\"https://znews-photo.zadn.vn/w660/Uploaded/pnbcuhbatgunb/2020_03_23/i13863960814_1.jpg\"\n                    alt=\"avatar\"\n                  />\n                </div>\n                <div\n                  className={\n                    username === messageContent.sender\n                      ? \"bubble bubble-light\"\n                      : \"bubble bubble-dark\"\n                  }\n                >\n                  {messageContent.message}\n                </div>\n                <Moment format=\"HH:mm\" id=\"time\">\n                  {messageContent.time}\n                </Moment>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"type-area\">\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            id=\"inputText\"\n            placeholder=\"Type messages here...\"\n            value={currentMessage}\n            onChange={(event) => {\n              setCurrentMessage(event.target.value);\n            }}\n            onKeyPress={(event) => {\n              event.key === \"Enter\" && sendMessage();\n            }}\n          />\n        </div>\n        <button className=\"button-send\" onClick={sendMessage}>\n          Send\n        </button>\n      </div>\n    </div>\n    // <div>\n    //   <Grid container>\n    //     <Grid item={true} xs={12}>\n    //       <Typography variant=\"h5\" className=\"header-message\">\n    //         Chat\n    //       </Typography>\n    //     </Grid>\n    //   </Grid>\n    //   <Grid container component={Paper} className={classes.chatSection}>\n    //     <Grid item={true} xs={3} className={classes.borderRight500}>\n    //       <List>\n    //         <ListItem button key=\"RemySharp\">\n    //           <ListItemIcon>\n    //             <Avatar\n    //               alt=\"Remy Sharp\"\n    //               src=\"https://material-ui.com/static/images/avatar/1.jpg\"\n    //             />\n    //           </ListItemIcon>\n    //           <ListItemText primary={receiver}>{receiver}</ListItemText>\n    //           <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\n    //         </ListItem>\n    //         <Divider />\n    //       </List>\n    //     </Grid>\n    //     <Grid item={true} xs={9}>\n    //       <List className={classes.messageArea}>\n    //         <ScrollToBottom className=\"message-container\">\n    //           {messageList.map((messageContent, index) => {\n    //             return (\n    //               <ListItem key={messageContent.message + index}>\n    //                 <Grid container>\n    //                   <Grid item={true} xs={12}>\n    //                     <div className=\"chat-messages\">\n    //                       <div\n    //                         className={\n    //                           username === messageContent.sender\n    //                             ? classes.messageTextSelf\n    //                             : classes.messageTextOpponent\n    //                         }\n    //                       >\n    //                         {messageContent.message}\n    //                         <div className={classes.from}>\n    //                           <Moment format=\"HH:mm\" id=\"time\">\n    //                             {messageContent.time}\n    //                           </Moment>\n    //                         </div>\n    //                       </div>\n    //                     </div>\n    //                   </Grid>\n    //                 </Grid>\n    //               </ListItem>\n    //             );\n    //           })}\n    //         </ScrollToBottom>\n    //       </List>\n    //       <Divider />\n    //       <Grid container style={{ padding: \"20px\" }}>\n    //         <Grid item={true} xs={11}>\n    //           <TextField\n    //             id=\"outlined-basic-email\"\n    //             label=\"Type Something\"\n    //             fullWidth\n    //             value={currentMessage}\n    //             placeholder=\"Hey...\"\n    //             onChange={(event) => {\n    //               setCurrentMessage(event.target.value);\n    //             }}\n    //             onKeyPress={(event) => {\n    //               event.key === \"Enter\" && sendMessage();\n    //             }}\n    //           />\n    //         </Grid>\n    //         <Grid item={true} xs={1} align=\"right\">\n    //           <Fab color=\"primary\" aria-label=\"add\">\n    //             <SendIcon />\n    //           </Fab>\n    //         </Grid>\n    //       </Grid>\n    //     </Grid>\n    //   </Grid>\n    // </div>\n\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    // <div className=\"message-content\">\n    //   <p>{messageContent.message}</p>\n    // </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    // value={currentMessage}\n    // placeholder=\"Hey...\"\n    // onChange={(event) => {\n    //   setCurrentMessage(event.target.value);\n    // }}\n    // onKeyPress={(event) => {\n    //   event.key === \"Enter\" && sendMessage();\n    // }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}