[{"/Users/ISCITY/Desktop/development/livechat/client/src/index.js":"1","/Users/ISCITY/Desktop/development/livechat/client/src/App.js":"2","/Users/ISCITY/Desktop/development/livechat/client/src/reportWebVitals.js":"3","/Users/ISCITY/Desktop/development/livechat/client/src/chat.js":"4"},{"size":478,"mtime":1636088037696,"results":"5","hashOfConfig":"6"},{"size":1820,"mtime":1636561756689,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1636087577326,"results":"8","hashOfConfig":"6"},{"size":6846,"mtime":1636513148323,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1cu28vb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/ISCITY/Desktop/development/livechat/client/src/index.js",[],["20","21"],"/Users/ISCITY/Desktop/development/livechat/client/src/App.js",["22"],"/Users/ISCITY/Desktop/development/livechat/client/src/reportWebVitals.js",[],"/Users/ISCITY/Desktop/development/livechat/client/src/chat.js",["23"],"import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Moment from \"react-moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: \"100%\",\n    // height: \"80vh\",\n  },\n  headBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n  borderRight500: {\n    borderRight: \"1px solid #e0e0e0\",\n  },\n  messageArea: {\n    height: \"70vh\",\n    overflowY: \"auto\",\n  },\n  from: {\n    // width: \"100%\",\n    textAlign: \"right\",\n    fontSize: \"8px\",\n    margin: \"5px 0px 0px 25px\",\n  },\n\n  messageTextSelf: {\n    float: \"right\",\n    background: \"#683db8\",\n    color: \"#FFF\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n\n  messageTextOpponent: {\n    float: \"left\",\n    background: \"#ecf1f8\",\n    color: \"#4a4a4a\",\n    padding: \"9px\",\n    fontSize: \"13px\",\n    borderRadius: \"5px\",\n    marginBottom: \"3px\",\n  },\n});\n\nfunction Chat({ socket, username, receiver, chatData }) {\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        receiver: receiver,\n        sender: username,\n        message: currentMessage,\n        time: new Date(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n    // setMessageList(chatData);\n  }, [socket]);\n\n  useEffect(() => {\n    setMessageList(chatData);\n  }, [chatData]);\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item={true} xs={12}>\n          <Typography variant=\"h5\" className=\"header-message\">\n            Chat\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container component={Paper} className={classes.chatSection}>\n        <Grid item={true} xs={3} className={classes.borderRight500}>\n          <List>\n            <ListItem button key=\"RemySharp\">\n              <ListItemIcon>\n                <Avatar\n                  alt=\"Remy Sharp\"\n                  src=\"https://material-ui.com/static/images/avatar/1.jpg\"\n                />\n              </ListItemIcon>\n              <ListItemText primary={receiver}>{receiver}</ListItemText>\n              <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\n            </ListItem>\n            <Divider />\n          </List>\n        </Grid>\n        <Grid item={true} xs={9}>\n          <List className={classes.messageArea}>\n            <ScrollToBottom className=\"message-container\">\n              {messageList.map((messageContent, index) => {\n                return (\n                  <ListItem key={messageContent.message + index}>\n                    <Grid container>\n                      <Grid item={true} xs={12}>\n                        <div className=\"chat-messages\">\n                          <div\n                            className={\n                              username === messageContent.sender\n                                ? classes.messageTextSelf\n                                : classes.messageTextOpponent\n                            }\n                          >\n                            {messageContent.message}\n                            <div className={classes.from}>\n                              <Moment format=\"HH:mm\" id=\"time\">\n                                {messageContent.time}\n                              </Moment>\n                            </div>\n                          </div>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  </ListItem>\n                );\n              })}\n            </ScrollToBottom>\n          </List>\n          <Divider />\n          <Grid container style={{ padding: \"20px\" }}>\n            <Grid item={true} xs={11}>\n              <TextField\n                id=\"outlined-basic-email\"\n                label=\"Type Something\"\n                fullWidth\n                value={currentMessage}\n                placeholder=\"Hey...\"\n                onChange={(event) => {\n                  setCurrentMessage(event.target.value);\n                }}\n                onKeyPress={(event) => {\n                  event.key === \"Enter\" && sendMessage();\n                }}\n              />\n            </Grid>\n            <Grid item={true} xs={1} align=\"right\">\n              <Fab color=\"primary\" aria-label=\"add\">\n                <SendIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n    // <div className=\"chat-window\">\n    //   <div className=\"chat-header\">\n    //     <p>{receiver}</p>\n    //   </div>\n    //   <div className=\"chat-body\">\n    // <ScrollToBottom className=\"message-container\">\n    //   {messageList.map((messageContent, index) => {\n    //     return (\n    //       <div\n    //         className=\"message\"\n    //         id={username === messageContent.sender ? \"other\" : \"you\"}\n    //         key={messageContent.message + index}\n    //       >\n    //         <div>\n    // <div className=\"message-content\">\n    //   <p>{messageContent.message}</p>\n    // </div>\n    //           <div className=\"message-meta\">\n    //             <Moment format=\"HH:mm\" id=\"time\">\n    //               {messageContent.time}\n    //             </Moment>\n\n    //             <p id=\"author\">{messageContent.sender}</p>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })}\n    // </ScrollToBottom>\n    //   </div>\n    //   <div className=\"chat-footer\">\n    //     <input\n    //       type=\"text\"\n    // value={currentMessage}\n    // placeholder=\"Hey...\"\n    // onChange={(event) => {\n    //   setCurrentMessage(event.target.value);\n    // }}\n    // onKeyPress={(event) => {\n    //   event.key === \"Enter\" && sendMessage();\n    // }}\n    //     />\n    //     <button onClick={sendMessage}>&#9658;</button>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Chat;\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":12,"column":20,"nodeType":"30","messageId":"31","endLine":12,"endColumn":31},{"ruleId":"28","severity":1,"message":"32","line":7,"column":8,"nodeType":"30","messageId":"31","endLine":7,"endColumn":11},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'setChatData' is assigned a value but never used.","Identifier","unusedVar","'Box' is defined but never used.","no-global-assign","no-unsafe-negation"]